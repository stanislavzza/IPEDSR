% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/data_updates.R
\name{convert_year_to_integer}
\alias{convert_year_to_integer}
\title{Convert YEAR columns from DOUBLE to INTEGER type}
\usage{
convert_year_to_integer(tables = NULL, verbose = TRUE)
}
\arguments{
\item{tables}{Character vector of table names to process. If NULL (default),
processes all tables in the database.}

\item{verbose}{Logical indicating whether to print progress messages.
Default is TRUE.}
}
\value{
Invisibly returns a list with components:
  \item{total}{Total number of tables checked}
  \item{converted}{Number of tables where YEAR was converted to INTEGER}
  \item{already_integer}{Number of tables where YEAR was already INTEGER}
  \item{no_year}{Number of tables without a YEAR column}
  \item{errors}{Number of tables that encountered errors}
}
\description{
This function scans all tables in the IPEDS database and converts any YEAR
columns that are stored as DOUBLE to INTEGER type. This is a cosmetic fix
that makes the data types semantically correct (years should be integers)
and eliminates validation warnings.
}
\details{
The function uses DuckDB's ALTER TABLE to change the column type in place,
which is efficient and doesn't require rewriting the entire table. The
conversion is safe because:
\itemize{
  \item Years are always whole numbers (2019, 2020, etc.)
  \item No precision is lost when converting DOUBLE to INTEGER
  \item The operation is idempotent (can be run multiple times safely)
}

Before running this function on a production database, it's recommended
to create a backup using \code{ipeds_data_manager("backup")}.
}
\examples{
\dontrun{
# Convert YEAR to INTEGER in all tables
convert_year_to_integer()

# Convert only specific tables
convert_year_to_integer(tables = c("ADM2022", "ADM2023"))

# Run without progress messages
convert_year_to_integer(verbose = FALSE)
}

}
